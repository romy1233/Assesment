//I worked it the api in postman 

package main

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/jackc/pgx/v4/pgxpool"
	_ "github.com/lib/pq"
)

type User struct {
	ID               int64     `json:"id"`
	Name             string    `json:"name"`
	PhoneNumber      string    `json:"phone_number"`
	OTP              string    `json:"otp"`
	OTPExpirationTime time.Time `json:"otp_expiration_time"`
}

type Response struct {
	Message string `json:"message"`
}

var db *pgxpool.Pool

func main() {
	dbUrl := os.Getenv("OTP-Database")
	if dbUrl == "" {
		log.Fatal("$DATABASE_URL is not set")
	}

	var err error
	db, err = pgxpool.Connect(context.Background(), OTP-Database)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	r := gin.Default()

	r.POST("/api/users", createUser)
	r.POST("/api/users/generateotp", generateOTP)
	r.POST("/api/users/verifyotp", verifyOTP)

	r.Run()
}

func createUser(c *gin.Context) {
	var user User
	if err := c.ShouldBindJSON(&user); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	query := `INSERT INTO users (name, phone_number) VALUES ($1, $2) RETURNING id`
	var id int64
	err := db.QueryRow(context.Background(), query, user.Name, user.PhoneNumber).Scan(&id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"id": id})
}

func generateOTP(c *gin.Context) {
	var phoneNumber string
	if err := c.ShouldBindJSON(&phoneNumber); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	query := `SELECT id FROM users WHERE phone_number = $1`
	var id int64
	err := db.QueryRow(context.Background(), query, phoneNumber).Scan(&id)
	if err == sql.ErrNoRows {
		c.JSON(http.StatusNotFound, gin.H{"error": "Phone number not found"})
		return
	}
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	otp := fmt.Sprintf("%04d", rand.Intn(10000))
	query = `UPDATE users SET otp = $1, otp_expiration_time = NOW() + INTERVAL '1 minute' WHERE id = $2`
	_, err = db.Exec(context.Background(), query, otp, id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "OTP generated successfully"})
}

func verifyOTP(c *gin.Context) {
	var data struct {
		PhoneNumber string `json:"phone_number"`
		OTP         string `json:"otp"`
	}
	if err := c.ShouldBindJSON(&data); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()}}